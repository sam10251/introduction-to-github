#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int threeSumClosest(int* nums, int numsSize, int target) {
    if (numsSize < 3) return 0;

    // Sort the array to use the two-pointer technique
    qsort(nums, numsSize, sizeof(int), compare);

    int closestSum = INT_MAX;  // Initialize to a large value
    for (int i = 0; i < numsSize - 2; i++) {
        // Skip duplicates
        if (i > 0 && nums[i] == nums[i - 1]) continue;

        int left = i + 1, right = numsSize - 1;
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            // Check if we found a closer sum
            if (abs(sum - target) < abs(closestSum - target)) {
                closestSum = sum;
            }

            // Move the pointers
            if (sum < target) {
                left++;
            } else if (sum > target) {
                right--;
            } else {
                // Exact match found
                return sum;
            }
        }
    }

    return closestSum;
}

#include <stdlib.h>

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    // Create an array to store the result
    int* result = (int*)malloc(2 * sizeof(int));
    *returnSize = 2;

    // Iterate through the array
    for (int i = 0; i < numsSize; i++) {
        for (int j = i + 1; j < numsSize; j++) {
            // If the two numbers sum to the target, return their indices
            if (nums[i] + nums[j] == target) {
                result[0] = i;
                result[1] = j;
                return result;
            }
        }
    }

    // Return NULL if no solution is found
    *returnSize = 0;
    return NULL;
}
#include <stdlib.h>

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    // Create a dummy node to simplify result handling
    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* current = dummy;
    int carry = 0;

    // Iterate through both lists until both are exhausted
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int sum = carry;

        // Add the value from the first list, if available
        if (l1 != NULL) {
            sum += l1->val;
            l1 = l1->next;
        }

        // Add the value from the second list, if available
        if (l2 != NULL) {
            sum += l2->val;
            l2 = l2->next;
        }

        // Update carry for the next iteration
        carry = sum / 10;

        // Create a new node for the current digit and move to the next node
        current->next = (struct ListNode*)malloc(sizeof(struct ListNode));
        current = current->next;
        current->val = sum % 10;
        current->next = NULL;
    }

    // Return the result (dummy->next skips the dummy node)
    struct ListNode* result = dummy->next;
    free(dummy);  // Free the dummy node
    return result;
}
#include <string.h>

int lengthOfLongestSubstring(char* s) {
    int n = strlen(s);         // Length of the input string
    int maxLength = 0;         // To store the length of the longest substring
    int start = 0;             // Starting index of the current substring
    int lastIndex[256];        // To store the last index of each character (ASCII 256)

    // Initialize the lastIndex array to -1 (meaning character has not been encountered yet)
    for (int i = 0; i < 256; i++) {
        lastIndex[i] = -1;
    }

    // Iterate over each character in the string
    for (int i = 0; i < n; i++) {
        // If the character was seen before and is within the current window, move the start
        if (lastIndex[(int)s[i]] >= start) {
            start = lastIndex[(int)s[i]] + 1;
        }

        // Update the last seen index of the current character
        lastIndex[(int)s[i]] = i;

        // Calculate the length of the current substring and update maxLength
        maxLength = (i - start + 1 > maxLength) ? i - start + 1 : maxLength;
    }

    return maxLength;
}

#include <limits.h> // For INT_MAX

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    // Ensure nums1 is the smaller array to make binary search more efficient
    if (nums1Size > nums2Size) {
        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);
    }

    int x = nums1Size;
    int y = nums2Size;
    int low = 0, high = x;

    while (low <= high) {
        // Partition both arrays
        int partitionX = (low + high) / 2;
        int partitionY = (x + y + 1) / 2 - partitionX;

        // Handle edge cases where partitions are at the beginning or end
        int maxX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];
        int minX = (partitionX == x) ? INT_MAX : nums1[partitionX];

        int maxY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];
        int minY = (partitionY == y) ? INT_MAX : nums2[partitionY];

        // Check if we have partitioned correctly
        if (maxX <= minY && maxY <= minX) {
            // If combined array length is even
            if ((x + y) % 2 == 0) {
                return ((double)(fmax(maxX, maxY) + fmin(minX, minY))) / 2;
            } else {  // If combined array length is odd
                return (double)fmax(maxX, maxY);
            }
        } else if (maxX > minY) {  // Move partitionX left
            high = partitionX - 1;
        } else {  // Move partitionX right
            low = partitionX + 1;
        }
    }

    // If we exit the loop without returning, input arrays were not valid for finding the median
    return -1.0;
}

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Helper function to expand around the center and return the length of the palindrome
int expandAroundCenter(char* s, int left, int right) {
    while (left >= 0 && right < strlen(s) && s[left] == s[right]) {
        left--;
        right++;
    }
    // Return the length of the palindrome
    return right - left - 1;
}

char* longestPalindrome(char* s) {
    int n = strlen(s);
    if (n == 0) return "";

    int start = 0, end = 0;

    // Iterate over each character and consider it as the center of a palindrome
    for (int i = 0; i < n; i++) {
        // Case 1: Odd-length palindrome (single character center)
        int len1 = expandAroundCenter(s, i, i);

        // Case 2: Even-length palindrome (two-character center)
        int len2 = expandAroundCenter(s, i, i + 1);

        // Find the maximum length palindrome around the current center
        int len = (len1 > len2) ? len1 : len2;

        // Update the start and end of the longest palindrome found
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }

    // Allocate memory for the longest palindrome substring
    int resultLength = end - start + 1;
    char* result = (char*)malloc((resultLength + 1) * sizeof(char));
    strncpy(result, &s[start], resultLength);
    result[resultLength] = '\0';  // Null-terminate the result string

    return result;
}
#include <limits.h>  // For INT_MAX and INT_MIN

int reverse(int x) {
    int reversed = 0;

    while (x != 0) {
        int digit = x % 10;  // Get the last digit of x
        x /= 10;              // Remove the last digit from x

        // Check for overflow/underflow before updating the reversed number
        if (reversed > INT_MAX / 10 || (reversed == INT_MAX / 10 && digit > 7)) {
            return 0;  // Overflow, return 0
        }
        if (reversed < INT_MIN / 10 || (reversed == INT_MIN / 10 && digit < -8)) {
            return 0;  // Underflow, return 0
        }

        reversed = reversed * 10 + digit;  // Add the digit to the reversed number
    }

    return reversed;
}

#include <limits.h>  // For INT_MAX and INT_MIN
#include <ctype.h>   // For isdigit()

int myAtoi(char* s) {
    int i = 0, sign = 1, result = 0;

    // Step 1: Skip leading whitespaces
    while (s[i] == ' ') {
        i++;
    }

    // Step 2: Handle optional sign
    if (s[i] == '+' || s[i] == '-') {
        if (s[i] == '-') {
            sign = -1;
        }
        i++;
    }

    // Step 3: Convert digits to integer
    while (s[i] >= '0' && s[i] <= '9') {
        int digit = s[i] - '0';

        // Step 4: Check for overflow/underflow before updating result
        if (result > INT_MAX / 10 || (result == INT_MAX / 10 && digit > INT_MAX % 10)) {
            return sign == 1 ? INT_MAX : INT_MIN;
        }

        result = result * 10 + digit;
        i++;
    }

    // Step 5: Return the result with the correct sign
    return sign * result;
}

#include <stdbool.h>

bool isPalindrome(int x) {
    // If x is negative or ends with 0 (but is not 0), it cannot be a palindrome
    if (x < 0 || (x % 10 == 0 && x != 0)) {
        return false;
    }

    int reversedHalf = 0;
    
    // Reverse the second half of the number and compare with the first half
    while (x > reversedHalf) {
        reversedHalf = reversedHalf * 10 + x % 10;
        x /= 10;
    }

    // If the number has an odd number of digits, we can remove the middle digit
    return x == reversedHalf || x == reversedHalf / 10;
}

#include <stdbool.h>
#include <string.h>

bool isMatch(char* s, char* p) {
    int m = strlen(s);
    int n = strlen(p);
    
    // DP table, dp[i][j] will be true if s[0..i-1] matches p[0..j-1]
    bool dp[m + 1][n + 1];

    // Initialize the DP table to false
    memset(dp, 0, sizeof(dp));

    // Base case: empty string matches empty pattern
    dp[0][0] = true;

    // Handle patterns like "a*", ".*", etc.
    for (int j = 1; j <= n; j++) {
        if (p[j - 1] == '*') {
            dp[0][j] = dp[0][j - 2]; // '*' can match zero occurrences of the previous character
        }
    }

    // Fill the DP table
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (p[j - 1] == s[i - 1] || p[j - 1] == '.') {
                dp[i][j] = dp[i - 1][j - 1]; // Characters match or '.' matches any character
            } else if (p[j - 1] == '*') {
                // '*' can match zero or more of the previous character
                dp[i][j] = dp[i][j - 2] || // '*' matches zero occurrences
                            (dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.')); // '*' matches one or more occurrences
            }
        }
    }

    // The result is stored in dp[m][n]
    return dp[m][n];
}
#include <stdio.h>

int maxArea(int* height, int heightSize) {
    int left = 0, right = heightSize - 1;
    int maxArea = 0;

    while (left < right) {
        // Calculate the area with the current left and right pointers
        int currentArea = (right - left) * (height[left] < height[right] ? height[left] : height[right]);
        
        // Update the maxArea if we found a larger area
        if (currentArea > maxArea) {
            maxArea = currentArea;
        }

        // Move the pointer that points to the shorter line
        if (height[left] < height[right]) {
            left++;
        } else {
            right--;
        }
    }

    return maxArea;
}

#include <stdio.h>
#include <string.h>

char* intToRoman(int num) {
    // Array of Roman numerals and their corresponding values
    static char result[20];  // To store the result
    int i = 0;  // Result index
    
    // Define the values and corresponding symbols
    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    char* symbols[] = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
    
    // Loop over the values array and build the Roman numeral
    for (int j = 0; j < 13; j++) {
        while (num >= values[j]) {
            num -= values[j];
            // Append the corresponding symbol to the result
            for (int k = 0; symbols[j][k] != '\0'; k++) {
                result[i++] = symbols[j][k];
            }
        }
    }
    
    result[i] = '\0';  // Null-terminate the string
    
    return result;
}

#include <stdio.h>
#include <string.h>

int romanToInt(char* s) {
    // Define the mapping of Roman numerals to integers
    int romanValues[256] = {0};  // To store values for each character
    romanValues['I'] = 1;
    romanValues['V'] = 5;
    romanValues['X'] = 10;
    romanValues['L'] = 50;
    romanValues['C'] = 100;
    romanValues['D'] = 500;
    romanValues['M'] = 1000;

    int result = 0;
    int length = strlen(s);

    // Traverse the Roman numeral string
    for (int i = 0; i < length; i++) {
        // If the current value is less than the next value, subtract it
        if (i + 1 < length && romanValues[s[i]] < romanValues[s[i + 1]]) {
            result -= romanValues[s[i]];
        } else {
            result += romanValues[s[i]];
        }
    }

    return result;
}
#include <stdio.h>
#include <string.h>

char* longestCommonPrefix(char** strs, int strsSize) {
    if (strsSize == 0) return "";  // If no strings are provided, return empty string.

    // Initialize the prefix as the first string
    char* prefix = strs[0];
    
    for (int i = 1; i < strsSize; i++) {
        // Compare current prefix with the next string
        while (strncmp(prefix, strs[i], strlen(prefix)) != 0) {
            // Reduce the prefix by one character from the end until a match is found
            prefix[strlen(prefix) - 1] = '\0';
            if (strlen(prefix) == 0) return "";  // If prefix is reduced to an empty string
        }
    }
    
    return prefix;
}
#include <stdio.h>
#include <stdlib.h>

int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    if (numsSize < 3) {
        *returnSize = 0;
        return NULL;
    }

    // Sort the array to use two pointers technique
    qsort(nums, numsSize, sizeof(int), compare);

    // Allocate the result array
    int** result = (int**)malloc(sizeof(int*) * numsSize);
    *returnColumnSizes = (int*)malloc(sizeof(int) * numsSize);
    *returnSize = 0;

    for (int i = 0; i < numsSize - 2; i++) {
        // Skip duplicate elements to avoid repeated triplets
        if (i > 0 && nums[i] == nums[i - 1]) continue;

        int left = i + 1, right = numsSize - 1;
        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum == 0) {
                // Found a valid triplet
                result[*returnSize] = (int*)malloc(sizeof(int) * 3);
                result[*returnSize][0] = nums[i];
                result[*returnSize][1] = nums[left];
                result[*returnSize][2] = nums[right];
                (*returnColumnSizes)[*returnSize] = 3;
                (*returnSize)++;

                // Move both pointers to skip duplicates
                while (left < right && nums[left] == nums[left + 1]) left++;
                while (left < right && nums[right] == nums[right - 1]) right--;
                
                left++;
                right--;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
    }

    return result;
}
